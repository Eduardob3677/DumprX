"""
Notification system for DumprX.

Provides notifications via Telegram and other services.
"""

import requests
from typing import Optional, Dict, Any
from dataclasses import dataclass

from dumprxcore.config import Config
from dumprxcore.device_info import DeviceInfo
from dumprxutils.console import print_info, print_error, print_success, print_warning


@dataclass
class NotificationResult:
    """Result of notification operation."""
    success: bool
    message: str = ""
    error: Optional[str] = None


class TelegramNotifier:
    """Telegram notification service."""
    
    def __init__(self, config: Config):
        self.config = config
        self.api_base = "https://api.telegram.org/bot"
    
    def send_message(self, message: str, parse_mode: str = "Markdown") -> NotificationResult:
        """
        Send message to Telegram.
        
        Args:
            message: Message to send
            parse_mode: Parse mode (Markdown, HTML, or None)
            
        Returns:
            NotificationResult with operation status
        """
        if not self.config.telegram.enabled or not self.config.telegram.token:
            return NotificationResult(success=False, error="Telegram not configured")
        
        if not self.config.telegram.chat_id:
            return NotificationResult(success=False, error="Telegram chat ID not configured")
        
        try:
            url = f"{self.api_base}{self.config.telegram.token}/sendMessage"
            
            data = {
                'chat_id': self.config.telegram.chat_id,
                'text': message,
                'parse_mode': parse_mode
            }
            
            response = requests.post(url, json=data, timeout=30)
            
            if response.status_code == 200:
                return NotificationResult(success=True, message="Message sent successfully")
            else:
                error_msg = f"Telegram API error: {response.status_code}"
                return NotificationResult(success=False, error=error_msg)
                
        except Exception as e:
            error_msg = f"Failed to send Telegram message: {e}"
            return NotificationResult(success=False, error=error_msg)
    
    def send_firmware_notification(self, device_info: DeviceInfo, 
                                 git_repo_url: Optional[str] = None) -> NotificationResult:
        """
        Send firmware dump notification.
        
        Args:
            device_info: Device information
            git_repo_url: Git repository URL if available
            
        Returns:
            NotificationResult with operation status
        """
        message_lines = []
        
        message_lines.append("ðŸ”¥ *Firmware Dump Completed*")
        message_lines.append("")
        
        # Device information
        message_lines.append("ðŸ“± *Device Information:*")
        if device_info.brand and device_info.model:
            message_lines.append(f"â€¢ Device: {device_info.brand} {device_info.model}")
        if device_info.device:
            message_lines.append(f"â€¢ Codename: `{device_info.device}`")
        if device_info.release:
            message_lines.append(f"â€¢ Android: {device_info.release}")
        if device_info.build_id:
            message_lines.append(f"â€¢ Build ID: `{device_info.build_id}`")
        if device_info.security_patch:
            message_lines.append(f"â€¢ Security Patch: {device_info.security_patch}")
        
        message_lines.append("")
        
        # Repository information
        if git_repo_url:
            message_lines.append("ðŸ“‚ *Repository:*")
            message_lines.append(f"â€¢ [View on GitHub]({git_repo_url})")
        
        message_lines.append("")
        message_lines.append("âœ¨ *Generated by DumprX v2.0.0*")
        
        message = "\n".join(message_lines)
        
        return self.send_message(message)


class NotificationManager:
    """Manages all notification services."""
    
    def __init__(self, config: Config):
        self.config = config
        self.telegram = TelegramNotifier(config)
    
    def send_firmware_notification(self, device_info: DeviceInfo, 
                                 git_repo_url: Optional[str] = None) -> bool:
        """
        Send firmware dump notification via all enabled services.
        
        Args:
            device_info: Device information
            git_repo_url: Git repository URL if available
            
        Returns:
            True if at least one notification was sent successfully
        """
        success = False
        
        # Send Telegram notification
        if self.config.telegram.enabled:
            telegram_result = self.telegram.send_firmware_notification(device_info, git_repo_url)
            if telegram_result.success:
                print_success("Telegram notification sent")
                success = True
            else:
                print_warning(f"Telegram notification failed: {telegram_result.error}")
        
        return success
    
    def send_status_notification(self, title: str, message: str) -> bool:
        """
        Send status notification.
        
        Args:
            title: Notification title
            message: Notification message
            
        Returns:
            True if at least one notification was sent successfully
        """
        success = False
        
        if self.config.telegram.enabled:
            formatted_message = f"*{title}*\n\n{message}"
            telegram_result = self.telegram.send_message(formatted_message)
            if telegram_result.success:
                success = True
        
        return success