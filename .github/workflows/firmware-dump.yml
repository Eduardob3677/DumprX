name: DumprX v2.0 - Advanced Firmware Extraction

on:
  workflow_dispatch:
    inputs:
      firmware_url:
        description: 'Firmware URL to dump (supports 15+ formats and 8 download services)'
        required: true
        type: string
      git_provider:
        description: 'Git provider to upload the dump'
        required: true
        type: choice
        options:
          - github
          - gitlab
        default: github
      github_token:
        description: 'GitHub Token (required if using GitHub provider)'
        required: false
        type: string
      github_orgname:
        description: 'GitHub Organization Name (optional, uses username if not provided)'
        required: false
        type: string
      gitlab_token:
        description: 'GitLab Token (required if using GitLab provider)'
        required: false
        type: string
      gitlab_group:
        description: 'GitLab Group Name (optional, uses username if not provided)'
        required: false
        type: string
      gitlab_instance:
        description: 'GitLab Instance URL (default: gitlab.com)'
        required: false
        type: string
        default: 'gitlab.com'
      telegram_token:
        description: 'Telegram Bot Token (optional, for enhanced notifications)'
        required: false
        type: string
      telegram_chat_id:
        description: 'Telegram Chat/Channel ID (optional, for notifications)'
        required: false
        type: string
      use_legacy_dumper:
        description: 'Use legacy dumper.sh instead of new v2.0 (for compatibility)'
        required: false
        type: boolean
        default: false
      enable_debug:
        description: 'Enable debug mode for detailed logging'
        required: false
        type: boolean
        default: false

env:
  PUSH_TO_GITLAB: ${{ inputs.git_provider == 'gitlab' }}
  DEBUG: ${{ inputs.enable_debug && '1' || '0' }}

jobs:
  dump-firmware:
    runs-on: ubuntu-latest
    timeout-minutes: 600  # 10 hours timeout for very large firmware files
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        echo "üßπ Freeing up disk space..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt-get remove -y '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*'
        sudo apt-get autoremove -y
        sudo apt-get clean
        echo "üíæ Available disk space:"
        df -h
        
    - name: Set up Git LFS
      run: |
        echo "üì¶ Setting up Git LFS..."
        git lfs install --global
        git config --global filter.lfs.clean 'git-lfs clean -- %f'
        git config --global filter.lfs.smudge 'git-lfs smudge -- %f'
        git config --global filter.lfs.process 'git-lfs filter-process'
        git config --global filter.lfs.required true
        
    - name: Install dependencies with enhanced setup
      run: |
        echo "üîß Installing enhanced dependencies..."
        sudo chmod +x setup.sh
        ./setup.sh
        
        # Install additional tools for v2.0
        echo "üì¶ Installing additional tools..."
        pip install --break-system-packages uvx
        
        echo "‚úÖ Dependencies installed successfully"
        
    - name: Configure Git with enhanced settings
      run: |
        echo "‚öôÔ∏è Configuring Git..."
        git config --global user.email "dumprx-action@github.com"
        git config --global user.name "DumprX v2.0 Action"
        git config --global http.postBuffer 2048576000  # 2GB buffer
        git config --global core.compression 0
        git config --global core.preloadindex true
        git config --global core.fscache true
        git config --global gc.auto 0
        
    - name: Validate inputs and environment
      run: |
        echo "üîç Validating inputs..."
        
        # Validate git provider configuration
        if [[ "${{ inputs.git_provider }}" == "github" ]]; then
          if [[ -z "${{ inputs.github_token }}" ]]; then
            echo "‚ùå Error: GitHub token is required when using GitHub provider"
            exit 1
          fi
          echo "‚úÖ GitHub provider configuration valid"
        elif [[ "${{ inputs.git_provider }}" == "gitlab" ]]; then
          if [[ -z "${{ inputs.gitlab_token }}" ]]; then
            echo "‚ùå Error: GitLab token is required when using GitLab provider"
            exit 1
          fi
          echo "‚úÖ GitLab provider configuration valid"
        fi
        
        # Validate firmware URL
        if [[ ! "${{ inputs.firmware_url }}" =~ ^https?:// ]]; then
          echo "‚ùå Error: Invalid firmware URL format"
          exit 1
        fi
        echo "‚úÖ Firmware URL format valid"
        
        # Check available resources
        echo "üìä System resources:"
        echo "CPU cores: $(nproc)"
        echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
        echo "Disk space: $(df -h . | tail -1 | awk '{print $4}')"
        
    - name: Setup authentication tokens
      run: |
        echo "üîê Setting up authentication tokens..."
        
        # Create token files based on provider selection
        if [[ "${{ inputs.git_provider }}" == "github" ]]; then
          echo "${{ inputs.github_token }}" > .github_token
          if [[ -n "${{ inputs.github_orgname }}" ]]; then
            echo "${{ inputs.github_orgname }}" > .github_orgname
          fi
          # Remove GitLab token file if it exists
          rm -f .gitlab_token .gitlab_group .gitlab_instance
          echo "‚úÖ GitHub authentication configured"
        elif [[ "${{ inputs.git_provider }}" == "gitlab" ]]; then
          echo "${{ inputs.gitlab_token }}" > .gitlab_token
          if [[ -n "${{ inputs.gitlab_group }}" ]]; then
            echo "${{ inputs.gitlab_group }}" > .gitlab_group
          fi
          if [[ -n "${{ inputs.gitlab_instance }}" ]]; then
            echo "${{ inputs.gitlab_instance }}" > .gitlab_instance
          fi
          # Remove GitHub token file if it exists
          rm -f .github_token .github_orgname
          echo "‚úÖ GitLab authentication configured"
        fi
        
        # Setup Telegram tokens if provided
        if [[ -n "${{ inputs.telegram_token }}" ]]; then
          echo "${{ inputs.telegram_token }}" > .tg_token
          echo "‚úÖ Telegram bot token configured"
        fi
        if [[ -n "${{ inputs.telegram_chat_id }}" ]]; then
          echo "${{ inputs.telegram_chat_id }}" > .tg_chat
          echo "‚úÖ Telegram chat ID configured"
        fi
        
    - name: Set environment variables
      run: |
        echo "üåç Setting environment variables..."
        
        if [[ "${{ inputs.git_provider }}" == "gitlab" ]]; then
          echo "PUSH_TO_GITLAB=true" >> $GITHUB_ENV
        else
          echo "PUSH_TO_GITLAB=false" >> $GITHUB_ENV
        fi
        
        if [[ "${{ inputs.enable_debug }}" == "true" ]]; then
          echo "DEBUG=1" >> $GITHUB_ENV
          echo "üêõ Debug mode enabled"
        else
          echo "DEBUG=0" >> $GITHUB_ENV
        fi
        
    - name: Pre-extraction validation
      run: |
        echo "üîç Running pre-extraction validation..."
        
        # Test network connectivity
        if ! curl -s --max-time 10 --head "https://www.google.com" >/dev/null; then
          echo "‚ö†Ô∏è Warning: Network connectivity issues detected"
        else
          echo "‚úÖ Network connectivity confirmed"
        fi
        
        # Validate firmware URL accessibility
        echo "üì° Testing firmware URL accessibility..."
        if curl -s --max-time 30 --head "${{ inputs.firmware_url }}" >/dev/null; then
          echo "‚úÖ Firmware URL is accessible"
        else
          echo "‚ö†Ô∏è Warning: Firmware URL may not be accessible or may require authentication"
        fi
        
    - name: Run DumprX v2.0 firmware extractor
      run: |
        echo "üöÄ Starting DumprX v2.0 extraction process..."
        
        # Choose dumper version
        if [[ "${{ inputs.use_legacy_dumper }}" == "true" ]]; then
          echo "üîÑ Using legacy dumper.sh"
          chmod +x dumper.sh
          ./dumper.sh '${{ inputs.firmware_url }}'
        else
          echo "‚ö° Using enhanced dumper_v2.sh"
          chmod +x dumper_v2.sh
          ./dumper_v2.sh '${{ inputs.firmware_url }}'
        fi
        
    - name: Post-extraction analysis
      if: always()
      run: |
        echo "üìä Post-extraction analysis..."
        
        # Check extraction results
        if [[ -d "out" ]]; then
          echo "üìÇ Extraction output found:"
          find out -type f -name "*.img" | head -20
          
          echo ""
          echo "üìà Extraction statistics:"
          echo "Total files: $(find out -type f | wc -l)"
          echo "Total size: $(du -sh out | cut -f1)"
          echo "Partition images: $(find out -name "*.img" | wc -l)"
          echo "Boot images: $(find out -name "*boot*" -type d | wc -l)"
        else
          echo "‚ùå No extraction output found"
        fi
        
        # Check for error logs
        if find . -name "*.log" -size +0c | grep -q .; then
          echo "‚ö†Ô∏è Log files found:"
          find . -name "*.log" -exec basename {} \;
        fi
        
    - name: Cleanup sensitive files
      if: always()
      run: |
        echo "üßπ Cleaning up sensitive files..."
        rm -f .github_token .gitlab_token .tg_token .tg_chat .github_orgname .gitlab_group .gitlab_instance
        echo "‚úÖ Sensitive files cleaned"
        
    - name: Upload extraction artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: dumprx-debug-logs-${{ github.run_id }}
        path: |
          out/tmp/
          *.log
          out/extraction_log.txt
          out/device_info.txt
        retention-days: 7
        
    - name: Upload successful extraction summary
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: dumprx-extraction-summary-${{ github.run_id }}
        path: |
          out/device_info.txt
          out/extraction_log.txt
          out/*.txt
        retention-days: 3
        
    - name: Workflow summary
      if: always()
      run: |
        echo "üìã ## DumprX v2.0 Extraction Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**üîß Configuration:**" >> $GITHUB_STEP_SUMMARY
        echo "- Firmware URL: \`${{ inputs.firmware_url }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Git Provider: \`${{ inputs.git_provider }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Dumper Version: \`${{ inputs.use_legacy_dumper && 'Legacy (dumper.sh)' || 'Enhanced (dumper_v2.sh)' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Debug Mode: \`${{ inputs.enable_debug && 'Enabled' || 'Disabled' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ -f "out/device_info.txt" ]]; then
          echo "**üì± Device Information:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat out/device_info.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ -d "out" ]]; then
          echo "**üìä Extraction Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Total files extracted: \`$(find out -type f | wc -l)\`" >> $GITHUB_STEP_SUMMARY
          echo "- Partition images: \`$(find out -name "*.img" | wc -l)\`" >> $GITHUB_STEP_SUMMARY
          echo "- Total size: \`$(du -sh out | cut -f1)\`" >> $GITHUB_STEP_SUMMARY
        fi