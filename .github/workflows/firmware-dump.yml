name: DumprX Firmware Extraction

on:
  workflow_dispatch:
    inputs:
      firmware_url:
        description: 'Firmware download URL'
        required: true
        type: string
      upload_to_github:
        description: 'Upload extracted files to GitHub'
        required: false
        default: true
        type: boolean

jobs:
  extract:
    runs-on: ubuntu-latest
    timeout-minutes: 480
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt-get remove -y '^aspnetcore-.*'
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y 'php.*'
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          p7zip-full \
          aria2 \
          wget \
          curl \
          git \
          python3-pip \
          xz-utils \
          lz4 \
          brotli \
          lzop \
          cpio \
          file \
          xxd
          
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        
    - name: Setup DumprX
      run: |
        chmod +x setup.sh
        ./setup.sh
        
    - name: Configure Git
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git config --global http.postBuffer 524288000
        
    - name: Extract firmware
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TG_TOKEN: ${{ secrets.TG_TOKEN }}
        TG_CHAT: ${{ secrets.TG_CHAT }}
      run: |
        python3 dumprx_main.py "${{ github.event.inputs.firmware_url }}"
        
    - name: Upload extraction artifacts
      if: github.event.inputs.upload_to_github == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: extracted-firmware
        path: out/
        retention-days: 30
        
    - name: Generate extraction report
      run: |
        echo "# Firmware Extraction Report" > extraction_report.md
        echo "" >> extraction_report.md
        echo "**URL:** ${{ github.event.inputs.firmware_url }}" >> extraction_report.md
        echo "**Date:** $(date)" >> extraction_report.md
        echo "**Status:** $([ -d out ] && echo 'Success' || echo 'Failed')" >> extraction_report.md
        echo "" >> extraction_report.md
        if [ -d out ]; then
          echo "## Extracted Files:" >> extraction_report.md
          find out -type f -name "*.img" -o -name "*.bin" -o -name "*.dat" | head -20 | sed 's/^/- /' >> extraction_report.md
        fi
        
    - name: Upload report
      uses: actions/upload-artifact@v4
      with:
        name: extraction-report
        path: extraction_report.md
        
    - name: Upload debug logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: |
          out/tmp/
          *.log
        retention-days: 7